"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketNoneAuthorizer = exports.WebSocketAuthorizer = exports.WebSocketAuthorizerType = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("aws-cdk-lib/core");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
/**
 * Supported Authorizer types
 */
var WebSocketAuthorizerType;
(function (WebSocketAuthorizerType) {
    /** Lambda Authorizer */
    WebSocketAuthorizerType["LAMBDA"] = "REQUEST";
    /** IAM Authorizer */
    WebSocketAuthorizerType["IAM"] = "AWS_IAM";
})(WebSocketAuthorizerType = exports.WebSocketAuthorizerType || (exports.WebSocketAuthorizerType = {}));
/**
 * An authorizer for WebSocket Apis
 * @resource AWS::ApiGatewayV2::Authorizer
 */
class WebSocketAuthorizer extends core_1.Resource {
    /**
     * Import an existing WebSocket Authorizer into this CDK app.
     */
    static fromWebSocketAuthorizerAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromWebSocketAuthorizerAttributes);
            }
            throw error;
        }
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.authorizerId = attrs.authorizerId;
                this.authorizerType = attrs.authorizerType;
            }
            bind() {
                return {
                    authorizerId: attrs.authorizerId,
                    authorizationType: attrs.authorizerType,
                };
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_WebSocketAuthorizerProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, WebSocketAuthorizer);
            }
            throw error;
        }
        if (props.type === WebSocketAuthorizerType.LAMBDA && !props.authorizerUri) {
            throw new Error('authorizerUri is mandatory for Lambda authorizers');
        }
        const resource = new aws_apigatewayv2_1.CfnAuthorizer(this, 'Resource', {
            name: props.authorizerName ?? id,
            apiId: props.webSocketApi.apiId,
            authorizerType: props.type,
            identitySource: props.identitySource,
            authorizerUri: props.authorizerUri,
        });
        this.authorizerId = resource.ref;
    }
}
_a = JSII_RTTI_SYMBOL_1;
WebSocketAuthorizer[_a] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.WebSocketAuthorizer", version: "2.84.0-alpha.0" };
exports.WebSocketAuthorizer = WebSocketAuthorizer;
/**
 * Explicitly configure no authorizers on specific WebSocket API routes.
 */
class WebSocketNoneAuthorizer {
    bind(_options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_WebSocketRouteAuthorizerBindOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        return {
            authorizationType: 'NONE',
        };
    }
}
_b = JSII_RTTI_SYMBOL_1;
WebSocketNoneAuthorizer[_b] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.WebSocketNoneAuthorizer", version: "2.84.0-alpha.0" };
exports.WebSocketNoneAuthorizer = WebSocketNoneAuthorizer;
//# sourceMappingURL=data:application/json;base64,