import { APIGatewayProxyEventV2, APIGatewayProxyStructuredResultV2 } from "aws-lambda";
import { Adapter } from "./adapter/adapter.js";
import { SignerOptions } from "fast-jwt";
import { SessionValue } from "./session.js";
declare const onSuccessResponse: {
    session(input: SessionCreateInput): {
        type: "session";
        properties: SessionCreateInput;
    };
    http(input: APIGatewayProxyStructuredResultV2): {
        type: "http";
        properties: APIGatewayProxyStructuredResultV2;
    };
    provider(provider: string): {
        type: "http";
        properties: {
            statusCode: number;
            headers: {
                Location: string;
            };
        };
    };
};
export declare function AuthHandler<Providers extends Record<string, Adapter<any>>, Result = {
    [key in keyof Providers]: {
        provider: key;
    } & Extract<Awaited<ReturnType<Providers[key]>>, {
        type: "success";
    }>["properties"];
}[keyof Providers]>(input: {
    providers: Providers;
    clients: () => Promise<Record<string, string>>;
    onAuthorize?: (event: APIGatewayProxyEventV2) => Promise<void | keyof Providers>;
    onSuccess: (input: Result, response: typeof onSuccessResponse) => Promise<ReturnType<(typeof onSuccessResponse)[keyof typeof onSuccessResponse]>>;
    onIndex?: (event: APIGatewayProxyEventV2) => Promise<APIGatewayProxyStructuredResultV2>;
    onError?: () => Promise<APIGatewayProxyStructuredResultV2>;
}): (event: APIGatewayProxyEventV2, context: import("aws-lambda").Context) => Promise<APIGatewayProxyStructuredResultV2>;
export type SessionCreateInput = SessionValue & Partial<SignerOptions>;
export {};
